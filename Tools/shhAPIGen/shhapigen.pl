# perl -w

# Documentation generator for shhArc libraries/components from
# comments in the C++ source code for shhArc.


($version, $source_code, $output) = @ARGV;

if(!defined $source_code)
{
	$source_code=qw(../../Code/Arc/);
}
if(!defined $output)
{
	$output=qw(../../Docs/ApiReference/ApiReference.html);
}
if(!defined $version)
{
	$version = "(unknown version)";

}
else
{
	$version = "($version)"
}


$title = "API Reference - shhArc Engine $version";


$log=qw(./log.txt);
$intro_file=qw(./intro.html);

@postfrom = ();
@postto = ();
@metavars = ();
@globalvars = ();
@localvars = ();

use File::Find;
use Cwd;

open(DEBUG, ">&STDOUT"); # Use this to print to console for debugging
open(LOG, "> $log");
open(STDOUT, "> $output");

print <<END;
<html><head>

<!-- This file automatically generated by shhapigen.pl
Edit the comments in the source code, not this file. -->

<link rel="StyleSheet" href="shhArc.css">
<center><img src="shhArc_logo_light.jpg"/></center>
<title>$title</title></head><body><h1><center>$title</center></h1>

END

open my $intro, '<', $intro_file
    or die "Could not open $filename for reading: $!";
my $contents = do { local $/; <$intro> };
print $contents;

@head = ();
@chunks = ();
$module = "API";
$item = "";
$itemdisplay = "";
$params = "";
$return = "";
$text = "";
$desc = "";
$just_got_desc = 0;
$just_got_param = 0;
$just_got_return = 0;
$getting_func = 0;
$waserror = 0;

sub process_file
{
	$file = $_;

	if ($file ne "Api.cpp" && $file ne "Api.h")
	{
		return;
	}
	$file = $_;


	open(SOURCE, "< $file");
	$line = 0;
	$file = getcwd."/".$file;
	
	while(<SOURCE>)
	{
		$line = $line+1;
		s:[\n]::g; # strip Windows CR
		s:[\r]::g; # strip Windows Lb
		s:[\t]::g; # strip tav

		$trimmed = $_;
		$trimmed =~ s/^[ \t]+//;
		$trimmed =~ s/[ \t]+$//;
		

		
		if (s:^//[ ]::)
		{
			if (m:^([[A-Za-z]*)[ 	]*(.*):)
			{
				if ($1 eq "Function")
				{
					$2 =~ s/^[ \t]+//;
					$item = substr($2, 1);
					$return = "none";
					$params = "none";
					$text = "";
					$itemdisplay = $2;
					$getting_func = 0;
				}
				elsif ($item ne "" && $1 eq "Return" or $1 eq "Returns")
				{
					$2 =~ s/^[ \t]+//;
					$return = substr($2, 1);
					$just_got_desc = 0;
					$just_got_param = 0;
					$just_got_return = 1;
				}
				elsif ($item ne "" && $1 eq "Arguments")
				{
					$2 =~ s/^[ \t]+//;
					$params = substr($2, 1);
					$just_got_desc = 0;
					$just_got_param = 1;
					$just_got_return = 0;
				}
				elsif ($item ne "" && $1 eq "Description")
				{	
					$2 =~ s/^[ \t]+//;
					$text = substr($2, 1);
					$just_got_desc = 1;
					$just_got_param = 0;
					$just_got_return = 0;
				}
			}
		}
		elsif($item ne "")
		{
			if(s:^//::)
			{
				$trimmed = $_;
				$trimmed =~ s/^[ \t]+//;
				$trimmed =~ s/[ \t]+$//;

				if($just_got_desc eq 1)
				{
					$text .=  " " . $trimmed;
				}
				elsif($just_got_param eq 1)
				{
					$params .=  " " . $trimmed ;
				}
				elsif($just_got_return eq 1)
				{
					$return .=  " " . $trimmed ;
				}
			}
			elsif ($trimmed ne "{")
			{		
				$func .=  $trimmed;
			}
			else
			{
				
				$arguments =   "Arguments: ";
				$arguments .= $params;
				$retval =      "Returns: ";
				$retval .= $return;
				$description = "Description: ";
				$description .= $text;


				$func =~ s/</&lt;/g;
				$func =~ s/>/&gt;/g;
				

				$html = "";
				# warn "Syntax error at $file line $line: Warning thing $module$item $params $return $itemdisplay";
				$html .= <<END;
<p><table align=center border=1 cellpadding=3 cellspacing=0 width="99%">
<tr><td class="command"><a name="$item">
<span class="command">${func}</span>
END
				$html .= <<END;
</td></tr><tr><td class="description">$description</td></tr>
</td></tr><tr><td class="description">$arguments</td></tr>
</td></tr><tr><td class="description">$retval</td></tr></table>
END
				

				push @chunks,  { name => "$item",  code => "$html" };		
				
				$item = "";
				$params = "";
				$return = "";
				$text = "";
				$func = "";
			}
		}
	}
}



find(\&process_file, $source_code);

@ordered = sort { $a->{name} cmp $b->{name} } @chunks;

$body = "";
foreach $definition (@ordered) 
{
    print LOG $definition->{name};
    $body .= $definition->{code};
    $body .= " ";

}



print $head . "<p>\n";
print $body;
print "</body></html>";


