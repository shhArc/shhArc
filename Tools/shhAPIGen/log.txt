void Api::CloseDown()void Api::FinalizeGodObjects()void Api::FinalizeWorldObjects(const std::string &name)bool Api::CreateWorld(const ::std::string& name, const StringKeyDictionary& config, const std::string &templateRealm)void Api::DestroyWorld(const std::string& name)void Api::DestroyWorlds()void Api::CreateGod(const std::string& name, const std::string& realmTemplate)void Api::DestroyGod()GCPtr<Class> Api::CreateClass(const std::string& name, const std::string& typeName, const GCPtr<Process>& process, Registry::ProcessConstructor pc, Registry::ObjectConstructor oc)Message* Api::NewMessage(const std::string& name, const GCPtr<Messenger>& to, bool deletable)void Api::LuaThrowScriptError(const char* format, ...)inline const GCPtr<God> &Api::GetGod()inline void Api::UpdateGod(double until)unsigned int Api::CreateCollection(const GCPtr<Whole>& w, std::string& collectionName)void Api::DestroyCollection(const GCPtr<Whole>& w, std::string& collectionName)void Api::DestroyCollection(const GCPtr<Whole>& w, unsigned int& collectionId)unsigned int Api::AddPart(const GCPtr<Whole>& w, std::string& collectionName, std::string name, GCPtr<GCObject> object)unsigned int Api::AddPart(const GCPtr<Whole>& w, unsigned int collectionId, std::string name, GCPtr<GCObject> object)bool Api::GetPart(const GCPtr<Whole>& w, std::string& collectionName, unsigned int id, GCPtr<GCObject>& obj)bool Api::GetPart(const GCPtr<Whole>& w, std::string& collectionName, std::string name, GCPtr<GCObject>& obj)bool Api::GetPart(const GCPtr<Whole>& w, unsigned int collectionId, unsigned int id, GCPtr<GCObject>& obj)bool Api::GetPart(const GCPtr<Whole>& w, unsigned int collectionId, std::string name, GCPtr<GCObject>& obj)inline void Api::DestroyPart(const GCPtr<Whole>& w, std::string& collectionName, std::string& partName)inline void Api::DestroyPart(const GCPtr<Whole>& w, std::string& collectionName, unsigned int& partId)inline void Api::DestroyPart(const GCPtr<Whole>& w, unsigned int& collectionId, std::string& partName)inline void Api::DestroyPart(const GCPtr<Whole>& w, unsigned int& collectionId, unsigned int& partId)inline const GCPtr<Agent> Api::GetAgent()inline const GCPtr<Node> Api::GetNode()inline const GCPtr<Process> Api::GetCurrentProcess()inline Implementation Api::GetImplementation()inline Privileges Api::GetPrivileges()inline const GCPtr<Environment> &Api::GetHomeEnvironment()inline const GCPtr<Environment>& Api::GetCurrentEnvironment()template<typename T> inline void Api::AddMsgArg(Message* msg, T* arg)template<typename T> inline T* Api::GetMsgReturnVal(Message* msg, unsigned int retrunValNum, T* dummy)inline bool Api::SendMsg(Message* msg, double delay)inline void Api::OpenNamespace(const std::string& name)inline void Api::CloseNamespace()template<class T> inline unsigned int Api::LuaRegisterType(const T* example, const std::string& alias, StringFunction stringer, ValueFunction valuer, bool allowInterVM, bool regsiterConstructors)template< typename F >inline void Api::RegisterFunction(const ::std::string& functionName, F *f, unsigned int firstReturnArg, const GCPtr<Module>& module)template< typename C, typename F >inline void Api::RegisterMemberFunction(const C* ownerExampe, const ::std::string& functionName, F *f, unsigned int firstReturnArg, const GCPtr<Module>& module)inline void Api::RegisterHardClass(const GCPtr<Class>& cls)inline void Api::LuaRegisterFunction(const std::string& name, LuaCFunction fn, void* data, LuaTypeId dataType)inline const GCPtr<LuaProcess> Api::LuaGetCurrentProcess()inline lua_State* Api::LuaGetCurrentLuaState()inline unsigned int Api::LuaGetNumArgs(lua_State* L)inline void Api::LuaCheckNumArguments(lua_State* L, unsigned int n)inline void Api::LuaCheckNumArgumentsGreaterOrEqual(lua_State* L, unsigned int n)inline int Api::LuaCheckNumArgumentRange(lua_State* L, unsigned int args[], unsigned int numSizes)inline const int Api::LuaGetArgumentType(lua_State* L, int arg)template<typename T> inline void Api::LuaGetArgument(lua_State* L, int arg, T& t)inline const TValue* Api::LuaGetArg(lua_State* L, int arg)inline bool Api::LuaRenameTableValue(const std::string& oldName, const std::string& newName)inline void Api::LuaGetErrorMessageDetails(std::string& errorMessage)